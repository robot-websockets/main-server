{"version":3,"sources":["appSettings.js","api.js","controls/proximity-sensor.jsx","controls/slider-control.jsx","video/video-feed.jsx","controls/info/rpi-info.jsx","settings/settings.jsx","App.js","serviceWorker.js","index.js"],"names":["appSettings","websocketUrl","videoFeedUrl","socket","openSocket","concat","sendMovementControl","speed","direction","payload","JSON","stringify","emit","ProximitySensor","props","_this","cb","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","proximity","err","setState","on","data","width","toString","backgroundColor","react_default","a","createElement","className","style","setStyles","Component","innerGrid","css","_templateObject","innerGridItem","_templateObject2","buttonStyle","_templateObject3","Slider","sliderValue","console","log","toLowerCase","capitalizeFirstLetter","d","parse","string","charAt","toUpperCase","slice","e","val","target","value","Number","_this2","core_browser_esm","onClick","stopTrain","_this3","type","id","name","min","max","onChange","setSliderValues","VideoFeed","url","ip","port","caption","src","alt","uniqueString","require","Info","info","checkInfoItemExistsAndUpdate","infoItem","toConsumableArray","filter","header","length","addInfoItem","item","time","Date","push","sort","b","removeInfoItem","String","trim","map","key","message","src_settings_settings","toggle","stopPropagation","addFeed","videoFeeds","feed","defaultValue","editVideoFeed","removeVideoFeed","WEB_SOCKET_URL","VIDEO_FEED_URL","App","websocketPort","settingsShow","toggleSettingsPage","settings","saveSettings","addVideoFeed","inputField","feeds","localStorage","setItem","oldState","getItem","s","video_feed","proximity_sensor","slider_control","rpi_info","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"obAKeA,EALK,CAChBC,aAAc,eACdC,aAAc,gBCAZC,QAASC,GAAU,UAAAC,OAAWL,EAAYC,aAAvB,UAKzB,SAASK,EAAoBC,EAAOC,GAChC,IAAMC,EAAUC,KAAKC,UAAU,CAAEJ,QAAOC,cACxCL,EAAOS,KAAK,mBAAoBH,OCoCrBI,cAtCX,SAAAA,EAAYC,GAAO,IAAAC,EDKaC,ECLb,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACfE,EAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,KAJVS,MAAQ,CACJC,UAAW,eDOiBR,ECFD,SAACS,EAAKD,GAAN,OACvBT,EAAKW,SAAS,CACVF,eDCZrB,EAAOwB,GAAG,YAAa,SAAAC,GAEnBZ,EAAG,KAAMY,KCRMb,2EAWf,IAAMS,EAAYL,KAAKI,MAAMC,UAC7B,OAAIA,EAAY,GACL,CACHK,MAAOL,EAAUM,WAAa,IAC9BC,gBAAiB,OAEdP,EAAY,GACZ,CACHK,MAAOL,EAAUM,WAAa,IAC9BC,gBAAiB,UAIlB,CAAEF,OADCL,EAAY,IAAMA,EAAY,KACtBM,WAAa,IAAKC,gBAAiB,0CAIrD,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,aACAH,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAOjB,KAAKkB,sBApCpBC,gjBCE9B,IAAMC,EAAYC,YAAHC,KAOTC,EAAgBF,YAAHG,KAUbC,EAAcJ,YAAHK,KA0HFC,cAzGX,SAAAA,EAAYhC,GAAO,IAAAC,EFrBaC,EEqBb,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,IACf/B,EAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,KAAML,KAPVS,MAAQ,CACJwB,YAAa,EACbvC,UAAW,UACXD,MAAO,GFlBqBS,EEwBD,SAACS,EAAKG,GAC7BoB,QAAQC,IAAIrB,GAD0B,IAEhCpB,EAAqBoB,EAArBpB,UAAWD,EAAUqB,EAAVrB,MACbwC,EAAc,EAClB,OAAQvC,EAAU0C,eACd,IAAK,WAEDH,EADAxC,EAAQA,EAAQ,GAAKA,EAAQA,EAE7B,MACJ,IAAK,YACDwC,EAAcxC,EAAQ,EAAIA,GAASA,EACnCA,EAAQA,EAAQ,GAAKA,EAAQA,EAC7B,MACJ,QACIC,EAAY,UACZD,EAAQ,EAEhByC,QAAQC,IAAIF,GACZhC,EAAKW,SAAS,CACVqB,YAAaA,EACbvC,UAAWO,EAAKoC,sBAAsB3C,GACtCD,MAAOA,KF5CnBJ,EAAOwB,GAAG,mBAAoB,SAAAC,GAE1B,IAAMwB,EAAI1C,KAAK2C,MAAMzB,GACrBZ,EAAG,KAAMoC,KEiBMrC,qFA6BGuC,GAClB,OAAOA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,2CAGzCC,GACZ,IACIlD,EADEmD,EAAMD,EAAEE,OAAOC,MAEjBtD,EAAQ,EAERoD,EAAM,GACNpD,EAAQoD,EACRnD,EAAY,YACLmD,EAAM,GACbpD,GAASoD,EACTnD,EAAY,cAEZD,EAAQuD,OAAOH,GACfnD,EAAY,WAGhBW,KAAKO,SAAS,SAAAH,GACV,MAAO,CAAEwB,YAAaY,EAAKnD,UAAWA,EAAWD,MAAOA,KAE5DD,EAAoBC,EAAOC,uCAI3BW,KAAKO,SAAS,SAAAH,GACV,MAAO,CAAEwB,YAAa,EAAGvC,UAAW,UAAWD,MAAOuD,OAAO,MAEjExD,EAAoB,EAAG,iDAGb,IAAAyD,EAAA5C,KACV,GAAyB,IAArBA,KAAKI,MAAMhB,MAGf,OACIU,OAAA+C,EAAA,EAAA/C,CAAA,UAAQuB,IAAKI,EAAaqB,QAAS,kBAAMF,EAAKG,cAA9C,yCAMC,IAAAC,EAAAhD,KACL,OACIF,OAAA+C,EAAA,EAAA/C,CAAA,OAAKkB,UAAU,qBACXlB,OAAA+C,EAAA,EAAA/C,CAAA,MAAIkB,UAAU,OAAd,SACAlB,OAAA+C,EAAA,EAAA/C,CAAA,OAAKuB,IAAKD,GACNtB,OAAA+C,EAAA,EAAA/C,CAAA,YACAA,OAAA+C,EAAA,EAAA/C,CAAA,OAAKuB,IAAKE,GAAgBvB,KAAKI,MAAMf,WACrCS,OAAA+C,EAAA,EAAA/C,CAAA,OAAKuB,IAAKE,GAAgBvB,KAAKI,MAAMhB,MAArC,KACAU,OAAA+C,EAAA,EAAA/C,CAAA,UACIuB,IAAKI,EACLqB,QAAS,kBAAME,EAAKD,aACpB/B,UACyB,IAArBhB,KAAKI,MAAMhB,MAAc,gBAAkB,UAJnD,SAUJU,OAAA+C,EAAA,EAAA/C,CAAA,SACImD,KAAK,QACLC,GAAG,QACHC,KAAK,SACLC,IAAI,OACJC,IAAI,MACJX,MAAO1C,KAAKI,MAAMwB,YAClB0B,SAAU,SAAAf,GAAC,OAAIS,EAAKO,gBAAgBhB,cAzGnCpB,aCNNqC,6MAvBXC,qBAAgB7D,EAAKD,MAAM+D,eAAM9D,EAAKD,MAAMgE,4FAIxC,OACI9C,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,kBAAaf,KAAKL,MAAMiE,SACxB/C,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,OACI8C,IAAG,UAAA3E,OAAYc,KAAKL,MAAM+D,GAAvB,KAAAxE,OACCc,KAAKL,MAAMgE,KADZ,eAGHG,IAAI,mDAbJ3C,aCClB4C,UAAeC,EAAQ,KAuFdC,cAhFX,SAAAA,EAAYtE,GAAO,IAAAC,EJeEC,EIfF,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiE,IACfrE,EAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmE,GAAA9D,KAAAH,KAAML,KALVS,MAAQ,CACJC,UAAW,cACX6D,KAAM,IAEStE,EAiBnBuE,6BAA+B,SAAAC,GAC3B,IAAKA,EAAU,OAAOvC,QAAQC,IAAI,mBAClC,IAAIoC,EAAIpE,OAAAuE,EAAA,EAAAvE,CAAOF,EAAKQ,MAAM8D,MAIN,KAFpBA,EAAOA,EAAKI,OAAO,SAAA/B,GAAC,OAAIA,EAAEgC,SAAWH,EAASG,UAErCC,SAOTN,GADAA,EAAIpE,OAAAuE,EAAA,EAAAvE,CAAOF,EAAKQ,MAAM8D,OACVI,OAAO,SAAA/B,GAAC,OAAIA,EAAEgC,SAAWH,EAASG,SAC9C3E,EAAKW,SAAS,CAAE2D,WA/BDtE,EAkCnB6E,YAAc,SAAAC,GAEV,IAAMR,EAAIpE,OAAAuE,EAAA,EAAAvE,CAAOF,EAAKQ,MAAM8D,MAE5BQ,EAAKxB,GAAKa,IACVW,EAAKC,KAAO,IAAIC,KAChBV,EAAKW,KAAKH,GACVR,EAAKY,KAAK,SAAChE,EAAGiE,GACV,OAAO,IAAIH,KAAKG,EAAEJ,MAAQ,IAAIC,KAAK9D,EAAE6D,QAGzC/E,EAAKW,SAAS,CAAE2D,SAChBrC,QAAQC,IAAR,oBAAA5C,OAAgCK,KAAKC,UAAUkF,MA9ChC9E,EAiDnBoF,eAAiB,SAAA9B,GACbrB,QAAQC,IAAIoB,GACZ,IAAIgB,EAAIpE,OAAAuE,EAAA,EAAAvE,CAAOF,EAAKQ,MAAM8D,MAC1BA,EAAOA,EAAKI,OAAO,SAAA/B,GAAC,OAAIA,EAAEW,KAAOA,IACjCtD,EAAKW,SAAS,CAAE2D,UJtCCrE,EIZD,SAACS,EAAK8D,GAClBvC,QAAQC,IAAIsC,GAIZA,EAASG,OAASU,OAAOb,EAASG,QAAQW,OAC1CtF,EAAKuE,6BAA6BC,GAGlCxE,EAAK6E,YAAYL,IJIzBpF,EAAOwB,GAAG,OAAQ,SAAAC,GACdZ,EAAG,KAAMY,KIjBMb,wEAwDV,IAAAgD,EAAA5C,KACL,OACIa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,SAEJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACVhB,KAAKI,MAAM8D,KAAKiB,IAAI,SAAAT,GAAI,OACrB7D,EAAAC,EAAAC,cAAA,OAAKqE,IAAKV,EAAKxB,GAAIlC,UAAU,QACzBH,EAAAC,EAAAC,cAAA,YAAO2D,EAAKH,QACZ1D,EAAAC,EAAAC,cAAA,YAAO2D,EAAKW,SACZxE,EAAAC,EAAAC,cAAA,UACI+B,QAAS,kBAAMF,EAAKoC,eAAeN,EAAKxB,MAD5C,sBAxET/B,aCFJmE,UAAA,SAAA3F,GAQX,OACIkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAU8B,QAASnD,EAAM4F,QACpC1E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiB8B,QATpB,SAAAP,GAChBA,EAAEiD,oBASM3E,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,gCAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UAAQ+B,QAASnD,EAAM8F,SACnB5E,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAGpBrB,EAAM+F,WAAWP,IAAI,SAAAQ,GAAI,OACtB9E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBoE,IAAKO,EAAKzC,IAC3CrC,EAAAC,EAAAC,cAAA,wBAEIF,EAAAC,EAAAC,cAAA,SACIkC,KAAK,OACL2C,aACID,EAAK/B,QACC+B,EAAK/B,QACL,gBAEVN,SAAU,SAAAf,GAAC,OACP5C,EAAMkG,cAActD,EAAGoD,EAAKzC,GAAI,eAK5CrC,EAAAC,EAAAC,cAAA,oBAEIF,EAAAC,EAAAC,cAAA,SACIkC,KAAK,OACL2C,aAAcD,EAAKjC,GACnBJ,SAAU,SAAAf,GAAC,OACP5C,EAAMkG,cAActD,EAAGoD,EAAKzC,GAAI,OAEpClC,UAAU,QAGlBH,EAAAC,EAAAC,cAAA,qBAEIF,EAAAC,EAAAC,cAAA,SACIkC,KAAK,OACLjC,UAAU,OACV4E,aAAcD,EAAKhC,KACnBL,SAAU,SAAAf,GAAC,OACP5C,EAAMkG,cAActD,EAAGoD,EAAKzC,GAAI,YAI5CrC,EAAAC,EAAAC,cAAA,UAAQ+B,QAAS,kBAAMnD,EAAMmG,gBAAgBH,EAAKzC,MAC9CrC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gCCzDnC+C,EAAeC,EAAQ,IAEvB+B,EAAiBlH,EAAYC,aAC7BkH,EAAiBnH,EAAYE,aA+KpBkH,cA9JX,SAAAA,IAAc,IAAArG,EAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAiG,IACVrG,EAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmG,GAAA9F,KAAAH,QAdJI,MAAQ,CACJsF,WAAY,CACR,CACIxC,GAAIa,IACJL,GAAIsC,EACJrC,KAAM,OACNC,QAAS,QAGjB9E,aAAciH,EACdG,cAAe,KACfC,cAAc,GAEJvG,EA2BdwG,mBAAqB,WACjB,IAAMC,EAAWzG,EAAKQ,MAAM+F,aAC5BvG,EAAKW,SAAS,CAAE4F,cAAeE,IAC/BxE,QAAQC,KAAKuE,GACbzG,EAAK0G,gBA/BK1G,EAkCd2G,aAAe,WACX,IAAMb,EAAU5F,OAAAuE,EAAA,EAAAvE,CAAOF,EAAKQ,MAAMsF,YAC5BC,EAAO,CACTzC,GAAIa,IACJL,GAAIqC,EACJpC,KAAM,OACNC,QAAS,IAEb8B,EAAWb,KAAKc,GAChB/F,EAAKW,SAAS,CAAEmF,eAChB9F,EAAK0G,gBA5CK1G,EA+CdkG,gBAAkB,SAAA5C,GACdrB,QAAQC,IAAR,kBAAA5C,OAA8BgE,IAC9B,IAAIwC,EAAU5F,OAAAuE,EAAA,EAAAvE,CAAOF,EAAKQ,MAAMsF,YAChCA,EAAaA,EAAWpB,OAAO,SAAAqB,GAAI,OAAIA,EAAKzC,KAAOA,IACnDtD,EAAKW,SAAS,CAAEmF,eAChB9F,EAAK0G,gBApDK1G,EAuDdiG,cAAgB,SAACtD,EAAGW,EAAIsD,GACpB,IAAId,EAAU5F,OAAAuE,EAAA,EAAAvE,CAAOF,EAAKQ,MAAMsF,YAE1Be,EAAQf,EAAWpB,OAAO,SAAAqB,GAAI,OAAIA,EAAKzC,KAAOA,IAMpD,GAHAwC,EAAaA,EAAWpB,OAAO,SAAAqB,GAAI,OAAIA,EAAKzC,KAAOA,IAG/CuD,EAAMjC,OAAS,EAAG,CAClB,IAAImB,EAAOc,EAAM,GAOjB,OAAQD,GACJ,IAAK,KACDb,EAAKjC,GAAKnB,EAAEE,OAAOC,MAAMwC,OACzB,MACJ,IAAK,OACDS,EAAKhC,KAAOpB,EAAEE,OAAOC,MAAMwC,OAC3B,MACJ,IAAK,UACDS,EAAK/B,QAAUrB,EAAEE,OAAOC,MAAMwC,OAKtCQ,EAAWb,KAAKc,GAChB9D,QAAQC,IAAIvC,KAAKC,UAAUkG,IAC3B9F,EAAKW,SAAS,CAAEmF,eAChB9F,EAAK0G,iBAxFC1G,EA8Fd0G,aAAe,WAGX,IAAMlG,EAAQR,EAAKQ,MAEnBsG,aAAaC,QAAQ,WAAYpH,KAAKC,UAAUY,KAjGhD,IAAMwG,EAAWF,aAAaG,QAAQ,YACtC,GAAID,EAAU,CACV,IAAIxG,EAAQb,KAAK2C,MAAM0E,GACvBxG,EAAM+F,cAAe,EACrBtE,QAAQC,IAAI,aACZlC,EAAKQ,MAAQA,MACV,CACHyB,QAAQC,IAAI,gBACZ,IAAMgF,EAAI,CACNpB,WAAY,CACR,CACIxC,GAAIa,IACJL,GAAIsC,EACJrC,KAAM,OACNC,QAAS,QAGjB9E,aAAciH,EACdG,cAAe,KACfC,cAAc,GAElBvG,EAAKQ,MAAQ0G,EAvBP,OAAAlH,wEAuGV,IACIyG,EAcJ,OAfqBrG,KAAKI,MAAM+F,eAI5BE,EACIxF,EAAAC,EAAAC,cAACuE,EAAD,CACII,WAAY1F,KAAKI,MAAMsF,WACvBH,OAAQvF,KAAKoG,mBACbX,QAASzF,KAAKuG,aACdT,gBAAiB9F,KAAK8F,gBACtBD,cAAe7F,KAAK6F,iBAM5BhF,EAAAC,EAAAC,cAAA,YACKsF,EACDxF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACVhB,KAAKI,MAAMsF,WAAWP,IAAI,SAAAQ,GAAI,OAC3B9E,EAAAC,EAAAC,cAACgG,EAAD,CACI3B,IAAKO,EAAKzC,GACVQ,GAAIiC,EAAKjC,GACTC,KAAMgC,EAAKhC,KACXC,QAAS+B,EAAK/B,YAatB/C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQ+B,QAAS9C,KAAKoG,oBAAtB,cAKRvF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACiG,EAAD,MACAnG,EAAAC,EAAAC,cAACkG,EAAD,MACApG,EAAAC,EAAAC,cAACmG,EAAD,gBApKN/F,aCHEgG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5G,EAAAC,EAAAC,cAAC2G,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ebafabbb.chunk.js","sourcesContent":["const appSettings = {\r\n    websocketUrl: '192.168.0.14',\r\n    videoFeedUrl: '192.168.0.14'\r\n};\r\n\r\nexport default appSettings;\r\n","import openSocket from 'socket.io-client';\r\nimport appSettings from './appSettings';\r\nconst socket = openSocket(`http://${appSettings.websocketUrl}:5001`);\r\n\r\nfunction sendData() {\r\n    socket.emit('data', { it: 'worked' });\r\n}\r\nfunction sendMovementControl(speed, direction) {\r\n    const payload = JSON.stringify({ speed, direction });\r\n    socket.emit('movement-control', payload);\r\n}\r\n\r\nfunction subscribeToProximitySensor(cb) {\r\n    socket.on('proximity', data => {\r\n        // console.log(data);\r\n        cb(null, data);\r\n    });\r\n}\r\nfunction subscribeToMovementControl(cb) {\r\n    socket.on('movement-control', data => {\r\n        // console.log(data);\r\n        const d = JSON.parse(data);\r\n        cb(null, d);\r\n    });\r\n}\r\nfunction subscribeToInfo(cb) {\r\n    socket.on('info', data => {\r\n        cb(null, data);\r\n    });\r\n}\r\n\r\nexport {\r\n    sendData,\r\n    subscribeToProximitySensor,\r\n    subscribeToMovementControl,\r\n    sendMovementControl,\r\n    subscribeToInfo\r\n};\r\n","import React, { Component } from 'react';\r\nimport { subscribeToProximitySensor } from '../api';\r\n\r\nclass ProximitySensor extends Component {\r\n    state = {\r\n        proximity: 'no data yet'\r\n    };\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        subscribeToProximitySensor((err, proximity) =>\r\n            this.setState({\r\n                proximity\r\n            })\r\n        );\r\n    }\r\n\r\n    setStyles() {\r\n        const proximity = this.state.proximity;\r\n        if (proximity < 30) {\r\n            return {\r\n                width: proximity.toString() + '%',\r\n                backgroundColor: 'red'\r\n            };\r\n        } else if (proximity < 50) {\r\n            return {\r\n                width: proximity.toString() + '%',\r\n                backgroundColor: 'orange'\r\n            };\r\n        }\r\n        const p = proximity < 100 ? proximity : 100;\r\n        return { width: p.toString() + '%', backgroundColor: 'green' };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='control-container'>\r\n                <h2 className='tab'>Proximity</h2>\r\n                <div />\r\n                <div className='test' style={this.setStyles()} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProximitySensor;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport { Component } from 'react';\r\nimport { sendMovementControl, subscribeToMovementControl } from '../api';\r\n\r\nconst innerGrid = css`\r\n    text-align: center;\r\n    display: grid;\r\n    column-gap: 10px;\r\n    grid-template-columns: 1fr 3fr 3fr 1fr;\r\n`;\r\n\r\nconst innerGridItem = css`\r\n    \r\n    padding: 12px;\r\n    text-align: center;\r\n    color: #f2f2f2;\r\n    font-size: 30px;\r\n    line-height:1.8;\r\n}\r\n`;\r\n\r\nconst buttonStyle = css`\r\n\r\nborder: none;\r\nwidth:80px;\r\nheight:80px;\r\nborder-radius: 40px;\r\nfont-size: 20px;\r\n}\r\n`;\r\n\r\nclass Slider extends Component {\r\n    state = {\r\n        sliderValue: 0,\r\n        direction: 'Stopped',\r\n        speed: 0\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        subscribeToMovementControl((err, data) => {\r\n            console.log(data);\r\n            let { direction, speed } = data;\r\n            let sliderValue = 0;\r\n            switch (direction.toLowerCase()) {\r\n                case 'forwards':\r\n                    speed = speed < 0 ? -speed : speed;\r\n                    sliderValue = speed;\r\n                    break;\r\n                case 'backwards':\r\n                    sliderValue = speed < 0 ? speed : -speed;\r\n                    speed = speed < 0 ? -speed : speed;\r\n                    break;\r\n                default:\r\n                    direction = 'stopped';\r\n                    speed = 0;\r\n            }\r\n            console.log(sliderValue);\r\n            this.setState({\r\n                sliderValue: sliderValue,\r\n                direction: this.capitalizeFirstLetter(direction),\r\n                speed: speed\r\n            });\r\n        });\r\n    }\r\n\r\n    capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    setSliderValues(e) {\r\n        const val = e.target.value;\r\n        let direction;\r\n        let speed = 0;\r\n\r\n        if (val > 0) {\r\n            speed = val;\r\n            direction = 'Forwards';\r\n        } else if (val < 0) {\r\n            speed = -val;\r\n            direction = 'Backwards';\r\n        } else {\r\n            speed = Number(val);\r\n            direction = 'Stopped';\r\n        }\r\n\r\n        this.setState(state => {\r\n            return { sliderValue: val, direction: direction, speed: speed };\r\n        });\r\n        sendMovementControl(speed, direction);\r\n    }\r\n\r\n    stopTrain() {\r\n        this.setState(state => {\r\n            return { sliderValue: 0, direction: 'Stopped', speed: Number(0) };\r\n        });\r\n        sendMovementControl(0, 'Stopped');\r\n    }\r\n\r\n    displayStop() {\r\n        if (this.state.speed === 0) {\r\n            return;\r\n        }\r\n        return (\r\n            <button css={buttonStyle} onClick={() => this.stopTrain()}>\r\n                STOP\r\n            </button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='control-container'>\r\n                <h2 className='tab'>Motor</h2>\r\n                <div css={innerGrid}>\r\n                    <div />\r\n                    <div css={innerGridItem}>{this.state.direction}</div>\r\n                    <div css={innerGridItem}>{this.state.speed}%</div>\r\n                    <button\r\n                        css={buttonStyle}\r\n                        onClick={() => this.stopTrain()}\r\n                        className={\r\n                            this.state.speed === 0 ? 'bg-light-grey' : 'bg-red'\r\n                        }\r\n                    >\r\n                        STOP\r\n                    </button>\r\n                </div>\r\n                <input\r\n                    type='range'\r\n                    id='start'\r\n                    name='volume'\r\n                    min='-100'\r\n                    max='100'\r\n                    value={this.state.sliderValue}\r\n                    onChange={e => this.setSliderValues(e)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Slider;\r\n","import React, { Component } from 'react';\r\n\r\nclass VideoFeed extends Component {\r\n    url = `http://${this.props.ip}:${this.props.port}/video_feed`;\r\n    // url = `https://explore.org/livecams/player/sharks/shark-cam/`;\r\n\r\n    render() {\r\n        return (\r\n            <figure>\r\n                <figcaption>{this.props.caption}</figcaption>\r\n                <picture>\r\n                    <img\r\n                        src={`http://${this.props.ip}:${\r\n                            this.props.port\r\n                        }/video_feed`}\r\n                        alt='raw video feed from opencv on the RPI'\r\n                    />\r\n                </picture>\r\n                {/* this is the feed from the pi zero, you will have to find the ip */}\r\n                {/* address of it and then input it below  */}\r\n                {/* <figcaption> {this.url}</figcaption> */}\r\n            </figure>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VideoFeed;\r\n","import React, { Component } from 'react';\r\nimport { subscribeToInfo } from '../../api';\r\nimport './info.css';\r\nconst uniqueString = require('unique-string');\r\n\r\nclass Info extends Component {\r\n    state = {\r\n        proximity: 'no data yet',\r\n        info: []\r\n    };\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        subscribeToInfo((err, infoItem) => {\r\n            console.log(infoItem);\r\n            // if item exists then update it\r\n            // else add new item\r\n            // use header as key for comparison.\r\n            infoItem.header = String(infoItem.header).trim();\r\n            this.checkInfoItemExistsAndUpdate(infoItem);\r\n            // if (result === -1) {\r\n            //     console.log('info item not found...');\r\n            this.addInfoItem(infoItem);\r\n            // }\r\n        });\r\n    }\r\n\r\n    checkInfoItemExistsAndUpdate = infoItem => {\r\n        if (!infoItem) return console.log('error: no item ');\r\n        let info = [...this.state.info];\r\n        // this returns an array of one or more.\r\n        info = info.filter(e => e.header === infoItem.header);\r\n        // return if empty\r\n        if (info.length === 0) {\r\n            return;\r\n        }\r\n\r\n        //now remove existing info items with the same header.\r\n        //and setState\r\n        info = [...this.state.info];\r\n        info = info.filter(e => e.header !== infoItem.header);\r\n        this.setState({ info });\r\n    };\r\n\r\n    addInfoItem = item => {\r\n        //get all the info items from state.\r\n        const info = [...this.state.info];\r\n\r\n        item.id = uniqueString();\r\n        item.time = new Date();\r\n        info.push(item);\r\n        info.sort((a, b) => {\r\n            return new Date(b.time) - new Date(a.time);\r\n        });\r\n        // console.log(v);\r\n        this.setState({ info });\r\n        console.log(`Info Item added: ${JSON.stringify(item)}`);\r\n    };\r\n\r\n    removeInfoItem = id => {\r\n        console.log(id);\r\n        let info = [...this.state.info];\r\n        info = info.filter(e => e.id !== id);\r\n        this.setState({ info });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='info-control-container'>\r\n                <div className='control-row-one'>\r\n                    <p className='label'>Info</p>\r\n                </div>\r\n                <div className='control-row-two'>\r\n                    {this.state.info.map(item => (\r\n                        <div key={item.id} className='item'>\r\n                            <span>{item.header}</span>\r\n                            <span>{item.message}</span>\r\n                            <button\r\n                                onClick={() => this.removeInfoItem(item.id)}\r\n                            >\r\n                                Remove\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Info;\r\n","import React from 'react';\r\nimport './settings.css';\r\n\r\nexport default props => {\r\n    const handleClick = e => {\r\n        e.stopPropagation();\r\n    };\r\n    // const saveValue = (e, id) => {\r\n    //     console.log('blur');\r\n    //     console.log(`event: ${e.target.value} id:${id}`);\r\n    // };\r\n    return (\r\n        <div className='overlay' onClick={props.toggle}>\r\n            <div className='settings-panel' onClick={handleClick}>\r\n                <h2>Settings</h2>\r\n                <h3>\r\n                    <small>version: 0.7.0</small>\r\n                </h3>\r\n                <div className='settings-panel-item'>\r\n                    <span>Video feeds</span>\r\n                    <span />\r\n                    <span />\r\n                    <button onClick={props.addFeed}>\r\n                        <i className='fas fa-plus' />\r\n                    </button>\r\n                </div>\r\n                {props.videoFeeds.map(feed => (\r\n                    <div className='settings-panel-item' key={feed.id}>\r\n                        <label>\r\n                            Caption:\r\n                            <input\r\n                                type='text'\r\n                                defaultValue={\r\n                                    feed.caption\r\n                                        ? feed.caption\r\n                                        : 'Enter Caption'\r\n                                }\r\n                                onChange={e =>\r\n                                    props.editVideoFeed(e, feed.id, 'caption')\r\n                                }\r\n                            />\r\n                        </label>\r\n\r\n                        <label>\r\n                            URI:\r\n                            <input\r\n                                type='text'\r\n                                defaultValue={feed.ip}\r\n                                onChange={e =>\r\n                                    props.editVideoFeed(e, feed.id, 'ip')\r\n                                }\r\n                                className='ip'\r\n                            />\r\n                        </label>\r\n                        <label>\r\n                            Port:\r\n                            <input\r\n                                type='text'\r\n                                className='port'\r\n                                defaultValue={feed.port}\r\n                                onChange={e =>\r\n                                    props.editVideoFeed(e, feed.id, 'port')\r\n                                }\r\n                            />\r\n                        </label>\r\n                        <button onClick={() => props.removeVideoFeed(feed.id)}>\r\n                            <i className='far fa-trash-alt sm' />\r\n                        </button>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n// import Time from './controls/time';\r\nimport ProximitySensor from './controls/proximity-sensor';\r\nimport Slider from './controls/slider-control';\r\nimport VideoFeed from './video/video-feed';\r\nimport Info from './controls/info/rpi-info';\r\nimport Settings from './settings/settings';\r\nimport appSettings from './appSettings';\r\nconst uniqueString = require('unique-string');\r\n\r\nconst WEB_SOCKET_URL = appSettings.websocketUrl;\r\nconst VIDEO_FEED_URL = appSettings.videoFeedUrl;\r\n\r\n// pi 7\" touchscreen Screen Resolution 800 x 480 pixels\r\nclass App extends Component {\r\n    state = {\r\n        videoFeeds: [\r\n            {\r\n                id: uniqueString(),\r\n                ip: VIDEO_FEED_URL,\r\n                port: '8081',\r\n                caption: 'raw'\r\n            }\r\n        ],\r\n        websocketUrl: WEB_SOCKET_URL,\r\n        websocketPort: 5001,\r\n        settingsShow: false\r\n    };\r\n    constructor() {\r\n        super();\r\n        const oldState = localStorage.getItem('appState');\r\n        if (oldState) {\r\n            let state = JSON.parse(oldState);\r\n            state.settingsShow = false;\r\n            console.log('has state');\r\n            this.state = state;\r\n        } else {\r\n            console.log('has no state');\r\n            const s = {\r\n                videoFeeds: [\r\n                    {\r\n                        id: uniqueString(),\r\n                        ip: VIDEO_FEED_URL,\r\n                        port: '8081',\r\n                        caption: 'raw'\r\n                    }\r\n                ],\r\n                websocketUrl: WEB_SOCKET_URL,\r\n                websocketPort: 5001,\r\n                settingsShow: false\r\n            };\r\n            this.state = s;\r\n        }\r\n    }\r\n\r\n    toggleSettingsPage = () => {\r\n        const settings = this.state.settingsShow;\r\n        this.setState({ settingsShow: !settings });\r\n        console.log(!settings);\r\n        this.saveSettings();\r\n    };\r\n\r\n    addVideoFeed = () => {\r\n        const videoFeeds = [...this.state.videoFeeds];\r\n        const feed = {\r\n            id: uniqueString(),\r\n            ip: WEB_SOCKET_URL,\r\n            port: '5002',\r\n            caption: ''\r\n        };\r\n        videoFeeds.push(feed);\r\n        this.setState({ videoFeeds });\r\n        this.saveSettings();\r\n    };\r\n\r\n    removeVideoFeed = id => {\r\n        console.log(`remove feed id:${id}`);\r\n        let videoFeeds = [...this.state.videoFeeds];\r\n        videoFeeds = videoFeeds.filter(feed => feed.id !== id);\r\n        this.setState({ videoFeeds });\r\n        this.saveSettings();\r\n    };\r\n\r\n    editVideoFeed = (e, id, inputField) => {\r\n        let videoFeeds = [...this.state.videoFeeds];\r\n        // get just the matching one\r\n        const feeds = videoFeeds.filter(feed => feed.id === id);\r\n        // console.log(JSON.stringify(feeds));\r\n        // get all but matching one.\r\n        videoFeeds = videoFeeds.filter(feed => feed.id !== id);\r\n        // console.log(JSON.stringify(videoFeeds));\r\n\r\n        if (feeds.length > 0) {\r\n            let feed = feeds[0];\r\n            // const newFeed = {\r\n            //     id: feed.id,\r\n            //     ip: feed.ip,\r\n            //     port: feed.port,\r\n            //     caption: feed.caption\r\n            // };\r\n            switch (inputField) {\r\n                case 'ip':\r\n                    feed.ip = e.target.value.trim();\r\n                    break;\r\n                case 'port':\r\n                    feed.port = e.target.value.trim();\r\n                    break;\r\n                case 'caption':\r\n                    feed.caption = e.target.value.trim();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            videoFeeds.push(feed);\r\n            console.log(JSON.stringify(videoFeeds));\r\n            this.setState({ videoFeeds });\r\n            this.saveSettings();\r\n        }\r\n\r\n        // console.log(`event: ${e.target.value} id:${id} field: ${inputField}`);\r\n    };\r\n\r\n    saveSettings = () => {\r\n        // console.log('TODO: save settings to local storage.');\r\n\r\n        const state = this.state;\r\n\r\n        localStorage.setItem('appState', JSON.stringify(state));\r\n    };\r\n\r\n    render() {\r\n        const showSettings = this.state.settingsShow;\r\n        let settings;\r\n\r\n        if (showSettings) {\r\n            settings = (\r\n                <Settings\r\n                    videoFeeds={this.state.videoFeeds}\r\n                    toggle={this.toggleSettingsPage}\r\n                    addFeed={this.addVideoFeed}\r\n                    removeVideoFeed={this.removeVideoFeed}\r\n                    editVideoFeed={this.editVideoFeed}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <main>\r\n                {settings}\r\n                <div className='App'>\r\n                    <div className='feeds'>\r\n                        {this.state.videoFeeds.map(feed => (\r\n                            <VideoFeed\r\n                                key={feed.id}\r\n                                ip={feed.ip}\r\n                                port={feed.port}\r\n                                caption={feed.caption}\r\n                            />\r\n                        ))}\r\n                        {/* <VideoFeed\r\n                            url={this.state.OpencvFeedUrl}\r\n                            port={this.state.OpencvFeedPort}\r\n                            caption='Processed video feed'\r\n                        />\r\n                        <VideoFeed\r\n                            url={this.state.rawFeedUrl}\r\n                            port={this.state.rawFeedPort}\r\n                            caption='Raw video feed'\r\n                        /> */}\r\n                        <div>\r\n                            <button onClick={this.toggleSettingsPage}>\r\n                                settings\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className='controls'>\r\n                        <ProximitySensor />\r\n                        <Slider />\r\n                        <Info />\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}