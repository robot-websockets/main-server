{"version":3,"sources":["api.js","controls/proximity-sensor.jsx","controls/slider-control.jsx","video/video-feed.jsx","controls/info/rpi-info.jsx","settings/settings.jsx","App.js","serviceWorker.js","index.js"],"names":["socket","openSocket","sendMovementControl","speed","direction","payload","JSON","stringify","emit","ProximitySensor","props","_this","cb","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","proximity","err","setState","on","data","console","log","width","toString","backgroundColor","react_default","a","createElement","className","style","setStyles","Component","innerGrid","css","_templateObject","innerGridItem","_templateObject2","buttonStyle","_templateObject3","Slider","sliderValue","toLowerCase","capitalizeFirstLetter","string","charAt","toUpperCase","slice","e","val","target","value","Number","_this2","core_browser_esm","onClick","stopTrain","_this3","type","id","name","min","max","onChange","setSliderValues","VideoFeed","url","ip","port","caption","src","concat","alt","uniqueString","require","Info","info","checkInfoItemExistsAndUpdate","infoItem","toConsumableArray","filter","header","length","addInfoItem","item","time","Date","push","sort","b","removeInfoItem","String","trim","map","key","message","src_settings_settings","toggle","stopPropagation","addFeed","videoFeeds","feed","defaultValue","editVideoFeed","removeVideoFeed","App","websocketUrl","websocketPort","settingsShow","toggleSettingsPage","settings","saveSettings","addVideoFeed","inputField","feeds","localStorage","setItem","oldState","getItem","parse","s","video_feed","proximity_sensor","slider_control","rpi_info","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96dd5424.chunk.js","sourcesContent":["import openSocket from 'socket.io-client';\r\nconst socket = openSocket('http://192.168.55.11:5001');\r\n\r\nfunction sendData() {\r\n    socket.emit('data', { it: 'worked' });\r\n}\r\nfunction sendMovementControl(speed, direction) {\r\n    const payload = JSON.stringify({ speed, direction });\r\n    socket.emit('movement-control', payload);\r\n}\r\n\r\nfunction subscribeToProximitySensor(cb) {\r\n    socket.on('proximity', data => {\r\n        console.log(data);\r\n        cb(null, data);\r\n    });\r\n}\r\nfunction subscribeToMovementControl(cb) {\r\n    socket.on('movement-control', data => {\r\n        console.log(data);\r\n        cb(null, data);\r\n    });\r\n}\r\nfunction subscribeToInfo(cb) {\r\n    socket.on('info', data => {\r\n        cb(null, data);\r\n    });\r\n}\r\n\r\nexport {\r\n    sendData,\r\n    subscribeToProximitySensor,\r\n    subscribeToMovementControl,\r\n    sendMovementControl,\r\n    subscribeToInfo\r\n};\r\n","import React, { Component } from 'react';\r\nimport { subscribeToProximitySensor } from '../api';\r\n\r\nclass ProximitySensor extends Component {\r\n    state = {\r\n        proximity: 'no data yet'\r\n    };\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        subscribeToProximitySensor((err, proximity) =>\r\n            this.setState({\r\n                proximity\r\n            })\r\n        );\r\n    }\r\n\r\n    setStyles() {\r\n        const proximity = this.state.proximity;\r\n        if (proximity < 30) {\r\n            return {\r\n                width: proximity.toString() + '%',\r\n                backgroundColor: 'red'\r\n            };\r\n        } else if (proximity < 50) {\r\n            return {\r\n                width: proximity.toString() + '%',\r\n                backgroundColor: 'yellow'\r\n            };\r\n        }\r\n        const p = proximity < 100 ? proximity : 100;\r\n        return { width: p.toString() + '%', backgroundColor: 'green' };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='control-container'>\r\n                <h2 className='tab'>Proximity</h2>\r\n                <div />\r\n                <div className='test' style={this.setStyles()} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProximitySensor;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport { Component } from 'react';\r\nimport { sendMovementControl, subscribeToMovementControl } from '../api';\r\n\r\nconst innerGrid = css`\r\n    text-align: center;\r\n    display: grid;\r\n    column-gap: 10px;\r\n    grid-template-columns: 1fr 3fr 3fr 1fr;\r\n`;\r\n\r\nconst innerGridItem = css`\r\n    \r\n    padding: 12px;\r\n    text-align: center;\r\n    color: #f2f2f2;\r\n    font-size: 30px;\r\n    line-height:1.8;\r\n}\r\n`;\r\n\r\nconst buttonStyle = css`\r\n\r\nborder: none;\r\nwidth:80px;\r\nheight:80px;\r\nborder-radius: 40px;\r\nfont-size: 20px;\r\n}\r\n`;\r\n\r\nclass Slider extends Component {\r\n    state = {\r\n        sliderValue: 0,\r\n        direction: 'Stopped',\r\n        speed: 0\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        subscribeToMovementControl((err, data) => {\r\n            console.log(data);\r\n            let { direction, speed } = data;\r\n            let sliderValue = 0;\r\n            switch (direction.toLowerCase()) {\r\n                case 'forwards':\r\n                    speed = speed < 0 ? -speed : speed;\r\n                    sliderValue = speed;\r\n                    break;\r\n                case 'backwards':\r\n                    sliderValue = speed < 0 ? speed : -speed;\r\n                    speed = speed < 0 ? -speed : speed;\r\n                    break;\r\n                default:\r\n                    direction = 'stopped';\r\n                    speed = 0;\r\n            }\r\n            console.log(sliderValue);\r\n            this.setState({\r\n                sliderValue: sliderValue,\r\n                direction: this.capitalizeFirstLetter(direction),\r\n                speed: speed\r\n            });\r\n        });\r\n    }\r\n\r\n    capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    setSliderValues(e) {\r\n        const val = e.target.value;\r\n        let direction;\r\n        let speed = 0;\r\n\r\n        if (val > 0) {\r\n            speed = val;\r\n            direction = 'Forwards';\r\n        } else if (val < 0) {\r\n            speed = -val;\r\n            direction = 'Backwards';\r\n        } else {\r\n            speed = Number(val);\r\n            direction = 'Stopped';\r\n        }\r\n\r\n        this.setState(state => {\r\n            return { sliderValue: val, direction: direction, speed: speed };\r\n        });\r\n        sendMovementControl(speed, direction);\r\n    }\r\n\r\n    stopTrain() {\r\n        this.setState(state => {\r\n            return { sliderValue: 0, direction: 'Stopped', speed: Number(0) };\r\n        });\r\n        sendMovementControl(0, 'Stopped');\r\n    }\r\n\r\n    displayStop() {\r\n        if (this.state.speed === 0) {\r\n            return;\r\n        }\r\n        return (\r\n            <button css={buttonStyle} onClick={() => this.stopTrain()}>\r\n                STOP\r\n            </button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='control-container'>\r\n                <h2 className='tab'>Motor</h2>\r\n                <div css={innerGrid}>\r\n                    <div />\r\n                    <div css={innerGridItem}>{this.state.direction}</div>\r\n                    <div css={innerGridItem}>{this.state.speed}%</div>\r\n                    <button\r\n                        css={buttonStyle}\r\n                        onClick={() => this.stopTrain()}\r\n                        className={\r\n                            this.state.speed === 0 ? 'bg-light-grey' : 'bg-red'\r\n                        }\r\n                    >\r\n                        STOP\r\n                    </button>\r\n                </div>\r\n                <input\r\n                    type='range'\r\n                    id='start'\r\n                    name='volume'\r\n                    min='-100'\r\n                    max='100'\r\n                    value={this.state.sliderValue}\r\n                    onChange={e => this.setSliderValues(e)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Slider;\r\n","import React, { Component } from 'react';\r\n\r\nclass VideoFeed extends Component {\r\n    url = `http://${this.props.ip}:${this.props.port}/video_feed`;\r\n    // url = `https://explore.org/livecams/player/sharks/shark-cam/`;\r\n\r\n    render() {\r\n        return (\r\n            <figure>\r\n                <figcaption>{this.props.caption}</figcaption>\r\n                <picture>\r\n                    <img\r\n                        src={`http://${this.props.ip}:${\r\n                            this.props.port\r\n                        }/video_feed`}\r\n                        alt='raw video feed from opencv on the RPI'\r\n                    />\r\n                </picture>\r\n                {/* this is the feed from the pi zero, you will have to find the ip */}\r\n                {/* address of it and then input it below  */}\r\n                {/* <figcaption> {this.url}</figcaption> */}\r\n            </figure>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VideoFeed;\r\n","import React, { Component } from 'react';\r\nimport { subscribeToInfo } from '../../api';\r\nimport './info.css';\r\nconst uniqueString = require('unique-string');\r\n\r\nclass Info extends Component {\r\n    state = {\r\n        proximity: 'no data yet',\r\n        info: []\r\n    };\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        subscribeToInfo((err, infoItem) => {\r\n            console.log(infoItem);\r\n            // if item exists then update it\r\n            // else add new item\r\n            // use header as key for comparison.\r\n            infoItem.header = String(infoItem.header).trim();\r\n            this.checkInfoItemExistsAndUpdate(infoItem);\r\n            // if (result === -1) {\r\n            //     console.log('info item not found...');\r\n            this.addInfoItem(infoItem);\r\n            // }\r\n        });\r\n    }\r\n\r\n    checkInfoItemExistsAndUpdate = infoItem => {\r\n        if (!infoItem) return console.log('error: no item ');\r\n        let info = [...this.state.info];\r\n        // this returns an array of one or more.\r\n        info = info.filter(e => e.header === infoItem.header);\r\n        // return if empty\r\n        if (info.length === 0) {\r\n            return;\r\n        }\r\n\r\n        //now remove existing info items with the same header.\r\n        //and setState\r\n        info = [...this.state.info];\r\n        info = info.filter(e => e.header !== infoItem.header);\r\n        this.setState({ info });\r\n    };\r\n\r\n    addInfoItem = item => {\r\n        //get all the info items from state.\r\n        const info = [...this.state.info];\r\n\r\n        item.id = uniqueString();\r\n        item.time = new Date();\r\n        info.push(item);\r\n        info.sort((a, b) => {\r\n            return new Date(b.time) - new Date(a.time);\r\n        });\r\n        // console.log(v);\r\n        this.setState({ info });\r\n        console.log(`Info Item added: ${JSON.stringify(item)}`);\r\n    };\r\n\r\n    removeInfoItem = id => {\r\n        console.log(id);\r\n        let info = [...this.state.info];\r\n        info = info.filter(e => e.id !== id);\r\n        this.setState({ info });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='info-control-container'>\r\n                <div className='control-row-one'>\r\n                    <p className='label'>Info</p>\r\n                </div>\r\n                <div className='control-row-two'>\r\n                    {this.state.info.map(item => (\r\n                        <div key={item.id} className='item'>\r\n                            <span>{item.header}</span>\r\n                            <span>{item.message}</span>\r\n                            <button\r\n                                onClick={() => this.removeInfoItem(item.id)}\r\n                            >\r\n                                Remove\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Info;\r\n","import React from 'react';\r\nimport './settings.css';\r\n\r\nexport default props => {\r\n    const handleClick = e => {\r\n        e.stopPropagation();\r\n    };\r\n    // const saveValue = (e, id) => {\r\n    //     console.log('blur');\r\n    //     console.log(`event: ${e.target.value} id:${id}`);\r\n    // };\r\n    return (\r\n        <div className='overlay' onClick={props.toggle}>\r\n            <div className='settings-panel' onClick={handleClick}>\r\n                <h2>Settings</h2>\r\n                <div className='settings-panel-item'>\r\n                    <span>Video feeds</span>\r\n                    <span />\r\n                    <span />\r\n                    <button onClick={props.addFeed}>\r\n                        <i className='fas fa-plus' />\r\n                    </button>\r\n                </div>\r\n                {props.videoFeeds.map(feed => (\r\n                    <div className='settings-panel-item' key={feed.id}>\r\n                        <label>\r\n                            Caption:\r\n                            <input\r\n                                type='text'\r\n                                defaultValue={\r\n                                    feed.caption\r\n                                        ? feed.caption\r\n                                        : 'Enter Caption'\r\n                                }\r\n                                onChange={e =>\r\n                                    props.editVideoFeed(e, feed.id, 'caption')\r\n                                }\r\n                            />\r\n                        </label>\r\n\r\n                        <label>\r\n                            URI:\r\n                            <input\r\n                                type='text'\r\n                                defaultValue={feed.ip}\r\n                                onChange={e =>\r\n                                    props.editVideoFeed(e, feed.id, 'ip')\r\n                                }\r\n                                className='ip'\r\n                            />\r\n                        </label>\r\n                        <label>\r\n                            Port:\r\n                            <input\r\n                                type='text'\r\n                                className='port'\r\n                                defaultValue={feed.port}\r\n                                onChange={e =>\r\n                                    props.editVideoFeed(e, feed.id, 'port')\r\n                                }\r\n                            />\r\n                        </label>\r\n                        <button onClick={() => props.removeVideoFeed(feed.id)}>\r\n                            <i className='far fa-trash-alt sm' />\r\n                        </button>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { Component } from 'react';\nimport './App.css';\n// import Time from './controls/time';\nimport ProximitySensor from './controls/proximity-sensor';\nimport Slider from './controls/slider-control';\nimport VideoFeed from './video/video-feed';\nimport Info from './controls/info/rpi-info';\nimport Settings from './settings/settings';\nconst uniqueString = require('unique-string');\n\n// const Settings = () => {\n//     return <div className='settings-panel'>settings here</div>;\n// };\n\n// pi 7\" touchscreen Screen Resolution 800 x 480 pixels\nclass App extends Component {\n    state = {\n        videoFeeds: [\n            {\n                id: uniqueString(),\n                ip: '192.168.55.12',\n                port: '8081',\n                caption: 'raw'\n            }\n        ],\n        websocketUrl: '192.168.55.11',\n        websocketPort: 5001,\n        settingsShow: false\n    };\n    constructor() {\n        super();\n        const oldState = localStorage.getItem('appState');\n        if (oldState) {\n            let state = JSON.parse(oldState);\n            state.settingsShow = false;\n            console.log('has state');\n            this.state = state;\n        } else {\n            console.log('has no state');\n            const s = {\n                videoFeeds: [\n                    {\n                        id: uniqueString(),\n                        ip: '192.168.55.12',\n                        port: '8081',\n                        caption: 'raw'\n                    }\n                ],\n                websocketUrl: '192.168.55.11',\n                websocketPort: 5001,\n                settingsShow: false\n            };\n            this.state = s;\n        }\n    }\n\n    toggleSettingsPage = () => {\n        const settings = this.state.settingsShow;\n        this.setState({ settingsShow: !settings });\n        console.log(!settings);\n        this.saveSettings();\n    };\n\n    addVideoFeed = () => {\n        const videoFeeds = [...this.state.videoFeeds];\n        const feed = {\n            id: uniqueString(),\n            ip: '192.168.55.12',\n            port: '8081',\n            caption: ''\n        };\n        videoFeeds.push(feed);\n        this.setState({ videoFeeds });\n        this.saveSettings();\n    };\n\n    removeVideoFeed = id => {\n        console.log(`remove feed id:${id}`);\n        let videoFeeds = [...this.state.videoFeeds];\n        videoFeeds = videoFeeds.filter(feed => feed.id !== id);\n        this.setState({ videoFeeds });\n        this.saveSettings();\n    };\n\n    editVideoFeed = (e, id, inputField) => {\n        let videoFeeds = [...this.state.videoFeeds];\n        // get just the matching one\n        const feeds = videoFeeds.filter(feed => feed.id === id);\n        // console.log(JSON.stringify(feeds));\n        // get all but matching one.\n        videoFeeds = videoFeeds.filter(feed => feed.id !== id);\n        // console.log(JSON.stringify(videoFeeds));\n\n        if (feeds.length > 0) {\n            let feed = feeds[0];\n            // const newFeed = {\n            //     id: feed.id,\n            //     ip: feed.ip,\n            //     port: feed.port,\n            //     caption: feed.caption\n            // };\n            switch (inputField) {\n                case 'ip':\n                    feed.ip = e.target.value.trim();\n                    break;\n                case 'port':\n                    feed.port = e.target.value.trim();\n                    break;\n                case 'caption':\n                    feed.caption = e.target.value.trim();\n                    break;\n                default:\n                    break;\n            }\n            videoFeeds.push(feed);\n            console.log(JSON.stringify(videoFeeds));\n            this.setState({ videoFeeds });\n            this.saveSettings();\n        }\n\n        // console.log(`event: ${e.target.value} id:${id} field: ${inputField}`);\n    };\n\n    saveSettings = () => {\n        // console.log('TODO: save settings to local storage.');\n\n        const state = this.state;\n\n        localStorage.setItem('appState', JSON.stringify(state));\n    };\n\n    render() {\n        const showSettings = this.state.settingsShow;\n        let settings;\n\n        if (showSettings) {\n            settings = (\n                <Settings\n                    videoFeeds={this.state.videoFeeds}\n                    toggle={this.toggleSettingsPage}\n                    addFeed={this.addVideoFeed}\n                    removeVideoFeed={this.removeVideoFeed}\n                    editVideoFeed={this.editVideoFeed}\n                />\n            );\n        }\n\n        return (\n            <main>\n                {settings}\n                <div className='App'>\n                    <div className='feeds'>\n                        {this.state.videoFeeds.map(feed => (\n                            <VideoFeed\n                                key={feed.id}\n                                ip={feed.ip}\n                                port={feed.port}\n                                caption={feed.caption}\n                            />\n                        ))}\n                        {/* <VideoFeed\n                            url={this.state.OpencvFeedUrl}\n                            port={this.state.OpencvFeedPort}\n                            caption='Processed video feed'\n                        />\n                        <VideoFeed\n                            url={this.state.rawFeedUrl}\n                            port={this.state.rawFeedPort}\n                            caption='Raw video feed'\n                        /> */}\n                        <div>\n                            <button onClick={this.toggleSettingsPage}>\n                                settings\n                            </button>\n                        </div>\n                    </div>\n                    <div className='controls'>\n                        <ProximitySensor />\n                        <Slider />\n                        <Info />\n                    </div>\n                </div>\n            </main>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}